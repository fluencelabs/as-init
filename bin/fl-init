#!/bin/bash

npm init -y -q
npm install --save-dev AssemblyScript/assemblyscript
npm install --save-dev fluencelabs/assemblyscript-sdk

npx asinit .
rm index.js
rm assembly/index.ts

node <<EOL
const fs = require('fs');

let rawdata = fs.readFileSync('package.json');
let packageJson = JSON.parse(rawdata);

let scripts = {
    flbuild: "asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap --validate --optimize --use abort=''"
};

packageJson.scripts = scripts;

let data = JSON.stringify(packageJson, null, 2);
fs.writeFileSync('package.json', data);
EOL

cat >assembly/index.ts <<EOL
// you can use other allocators like 'buddy' or 'tlsf', but only this can be fully reset
import "allocator/arena";

import {handler} from "./main";
import {loggedStringHandler} from "../node_modules/assemblyscript-sdk/assembly/index";
import {log} from "../node_modules/assemblyscript-sdk/assembly/logger";

// VM wrapper will put requests to memory through this function
export function allocate(size: usize) :i32 {
  return memory.allocate(size);
}

// VM wrapper will deallocate response from memory after handling it
export function deallocate(ptr: i32, size: usize): void {
  memory.free(ptr);
  // use 'memory.reset()' for reset memory after every request
}

// VM wrapper calls this function with a pointer on request in memory.
// Returns pointer on a response.
export function invoke(ptr: i32, size: i32): i32 {
    // this function will parse a request as a string and return result string as a pointer in memory
    // you can look on other functions in 'assemblyscript-sdk' library to handle own types of requests and responses
    return loggedStringHandler(ptr, size, handler, log);
}
EOL

cat >assembly/main.ts <<EOL
// main handler for an application
export function handler(request: string): string {
  return "";
}
EOL
